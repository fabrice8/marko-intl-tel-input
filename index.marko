
import intlTelInput from 'intl-tel-input'
import 'intl-tel-input/build/css/intlTelInput.css'
import './custom.css'
import './utils'

class {
  onCreate(){ this.state = { ctcode: '', phone: '' } }
  onInput( input ){
    // Apply class traditionaly to DOM
    input.class
    && this.$input
    && this.$input.length
    && this.$input.attr('class', `intlTelInput w-100 pl-4 ${input.class}`)

    if( !input.value ) return

    const [ full, ctcode, phone ] = input.value.match(/^\(\+([0-9]+)\) ?([0-9]+)$/) || []
    this.state.ctcode = ctcode
    this.state.phone = phone

    phone
    && this.iti
    && this.iti.setNumber(`+${ctcode}${phone}`)
  }
  onMount(){
    this.$input = $(this.getEl()).find('input.intlTelInput')

    this.iti = intlTelInput( this.$input[0],
                              {
                                formatOnDisplay: true,
                                separateDialCode: false,
                                initialCountry: 'auto',
                                preferredCountries: [ 'gh', 'tg', 'ng', 'us', 'gb' ],
                                geoIpLookup: async ( success, error ) => {

                                  let stored = uiStore.get('lookupCountry')

                                  !!stored ?
                                      // Display stored user country
                                      success( stored && stored.iso2 ? stored.iso2 : stored.country || defaultCountry )
                                      // Get user location country
                                      : fetch('https://ipinfo.io/json?token=7c8088674702f6')
                                            .then( response => response.json() )
                                            .then( data => {
                                              uiStore.set( 'lookupCountry', data )
                                              success( data && data.country ? data.country : 'tg' )
                                            })
                                },
                                customPlaceholder: ( CPlaceholder, cData ) => { return CPlaceholder }
                              } )
    
    this.state.phone && this.iti.setNumber(`+${this.state.ctcode}${this.state.phone}`)
    this.$input.on( 'countrychange', () => {

      if( !this.state.phone || !this.$input.val() ) return

      // When country select change
      if( this.iti.getValidationError() ){
        // wrong phone number: Empty phone input
        this.emit('error', 'Invalid Phone Number')
        return
      }

      const ctData = this.iti.getSelectedCountryData()

      if( typeof ctData == 'object' )
        uiStore.set( 'lookupCountry', ctData )

      const
      ctcode = ctData.dialCode,
      nInput = this.iti.getNumber( intlTelInputUtils.numberFormat.E164 )

      this.state.ctcode = ctcode
      this.state.phone = nInput.replace( new RegExp( '^\\+'+ ctcode ), '' )

      this.emit( 'change', '(+'+ this.state.ctcode +')'+ this.state.phone )
    } )
  }

  onDone(){
    // set the required format into the hidden inputs
    if( this.iti.getValidationError() ){
      // wrong phone number: Empty phone input
      this.emit('error', 'Phone Number is required')
      return
    }

    const 
    ctcode = this.iti.getSelectedCountryData().dialCode,
    nInput = this.iti.getNumber( intlTelInputUtils.numberFormat.E164 )

    this.state.ctcode = ctcode
    this.state.phone = nInput.replace( new RegExp( '^\\+'+ ctcode ), '' )

    this.state.phone && this.iti.setNumber(`+${this.state.ctcode}${this.state.phone}`)
    this.emit( 'change', '(+'+ this.state.ctcode +')'+ this.state.phone )
  }
}

<div.form-group no-update>
  <input.intlTelInput.w-100.pl-4 
        type="text"
        value=state.phone
        class=input.class
        placeholder=Locale('Phone Number')
        on-change('onDone')/>
</div>